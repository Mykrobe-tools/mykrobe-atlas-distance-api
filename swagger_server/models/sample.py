# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Sample(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, experiment_id: str=None, sub_type: str=None):  # noqa: E501
        """Sample - a model defined in Swagger

        :param experiment_id: The experiment_id of this Sample.  # noqa: E501
        :type experiment_id: str
        :param sub_type: The sub_type of this Sample.  # noqa: E501
        :type sub_type: str
        """
        self.swagger_types = {
            'experiment_id': str,
            'sub_type': str
        }

        self.attribute_map = {
            'experiment_id': 'experiment_id',
            'sub_type': 'sub_type'
        }
        self._experiment_id = experiment_id
        self._sub_type = sub_type

    @classmethod
    def from_dict(cls, dikt) -> 'Sample':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sample of this Sample.  # noqa: E501
        :rtype: Sample
        """
        return util.deserialize_model(dikt, cls)

    @property
    def experiment_id(self) -> str:
        """Gets the experiment_id of this Sample.


        :return: The experiment_id of this Sample.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id: str):
        """Sets the experiment_id of this Sample.


        :param experiment_id: The experiment_id of this Sample.
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def sub_type(self) -> str:
        """Gets the sub_type of this Sample.


        :return: The sub_type of this Sample.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type: str):
        """Sets the sub_type of this Sample.


        :param sub_type: The sub_type of this Sample.
        :type sub_type: str
        """

        self._sub_type = sub_type
