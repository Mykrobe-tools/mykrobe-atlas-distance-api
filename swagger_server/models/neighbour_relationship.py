# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.neighbour_summary import NeighbourSummary
from swagger_server import util

from swagger_server.models.neighbour_summary import NeighbourSummary  # noqa: E501

class NeighbourRelationship(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, neighbour=None, distance=None):  # noqa: E501
        """NeighbourRelationship - a model defined in OpenAPI

        :param neighbour: The neighbour of this NeighbourRelationship.  # noqa: E501
        :type neighbour: NeighbourSummary
        :param distance: The distance of this NeighbourRelationship.  # noqa: E501
        :type distance: int
        """
        self.openapi_types = {
            'neighbour': NeighbourSummary,
            'distance': int
        }

        self.attribute_map = {
            'neighbour': 'neighbour',
            'distance': 'distance'
        }

        self._neighbour = neighbour
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt) -> 'NeighbourRelationship':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NeighbourRelationship of this NeighbourRelationship.  # noqa: E501
        :rtype: NeighbourRelationship
        """
        return util.deserialize_model(dikt, cls)

    @property
    def neighbour(self):
        """Gets the neighbour of this NeighbourRelationship.


        :return: The neighbour of this NeighbourRelationship.
        :rtype: NeighbourSummary
        """
        return self._neighbour

    @neighbour.setter
    def neighbour(self, neighbour):
        """Sets the neighbour of this NeighbourRelationship.


        :param neighbour: The neighbour of this NeighbourRelationship.
        :type neighbour: NeighbourSummary
        """
        if neighbour is None:
            raise ValueError("Invalid value for `neighbour`, must not be `None`")  # noqa: E501

        self._neighbour = neighbour

    @property
    def distance(self):
        """Gets the distance of this NeighbourRelationship.


        :return: The distance of this NeighbourRelationship.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this NeighbourRelationship.


        :param distance: The distance of this NeighbourRelationship.
        :type distance: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance
